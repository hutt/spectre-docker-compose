services:
  redis:
    container_name: ${CONTAINER_NAME_PREFIX}-redis
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - ./redis:/data
    command: >
      redis-server
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save ""
      --tcp-backlog 128
      --timeout 300
      --tcp-keepalive 60
      --databases 1
      --hz 10
      --loglevel warning
      --client-output-buffer-limit "normal 0 0 0"
      --stop-writes-on-bgsave-error no
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 1s
      retries: 5
      start_period: 15s
    networks:
      - default

  ghost:
    container_name: ${CONTAINER_NAME_PREFIX}-ghost
    image: ghost:latest
    build: .
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      NODE_ENV: production
      url: http://${HOSTNAME}
      # Mail
      mail__transport: ${GHOST_MAIL_TRANSPORT}
      mail__from: ${GHOST_MAIL_FROM}
      mail__options__service: ${GHOST_MAIL_SERVICE}
      mail__options__host: ${GHOST_MAIL_HOST}
      mail__options__port: ${GHOST_MAIL_PORT}
      mail__options__auth__user: ${GHOST_MAIL_USER}
      mail__options__auth__pass: ${GHOST_MAIL_PASS}
      # Redis-Cache
      cache__type: ${GHOST_CACHE_TYPE}
      cache__redis__host: ${GHOST_CACHE_REDIS_HOST}
      cache__redis__port: ${GHOST_CACHE_REDIS_PORT}
      cache__redis__db: ${GHOST_CACHE_REDIS_DB}
      cache__redis__keyPrefix: ${GHOST_CACHE_REDIS_KEYPREFIX}
      cache__redis__ttl: ${GHOST_CACHE_REDIS_TTL}
      cache__redis__reuseConnection: ${GHOST_CACHE_REDIS_REUSECONNECTION}
      cache__redis__refreshAheadFactor: ${GHOST_CACHE_REDIS_REFRESHAHEADFACTOR}
      cache__redis__getTimeoutMilliseconds: ${GHOST_CACHE_REDIS_GETTIMEOUTMS}
      cache__redis__storeConfig__retryConnectSeconds: ${GHOST_CACHE_REDIS_RETRYCONNECTSECONDS}
      cache__redis__storeConfig__lazyConnect: ${GHOST_CACHE_REDIS_LAZYCONNECT}
      cache__redis__storeConfig__enableOfflineQueue: ${GHOST_CACHE_REDIS_ENABLEOFFLINEQUEUE}
      cache__redis__storeConfig__maxRetriesPerRequest: ${GHOST_CACHE_REDIS_MAXRETRIES}
      # HostSettings
      hostSettings__postsPublicCache__enabled: "true"
      hostSettings__linkRedirectsPublicCache__enabled: "true"
    volumes:
      - ./content:/var/lib/ghost/content
      - ./bootstrap:/var/lib/ghost/content/bootstrap
      - ./config.production.json:/var/lib/ghost/config.production.json:ro
    networks:
      - default
    healthcheck:
      test: timeout 10s bash -c ':> /dev/tcp/127.0.0.1/2368' || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s

  nginx:
    container_name: ${CONTAINER_NAME_PREFIX}-nginx
    image: nginx:alpine
    restart: unless-stopped
    depends_on:
      ghost:
        condition: service_healthy
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx-cache:/var/cache/nginx
    networks:
      - default
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 60s
      retries: 5
      start_period: 20s

volumes:
  nginx-cache:

networks:
  default:
    driver: bridge
